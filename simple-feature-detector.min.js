/* simple-feature-detector v0.0.4 (https://github.com/adam-lynch/simple-feature-detector) */
define( function(){
	return new function(){
		var _featureDetector = this, _vendorPrefixes = {g: "moz", k: "k", p: "o", t: "ms", w: "webkit"}, _buildListOfAcceptableVendorPrefixes = function( prefixes ){
			var vendors = [];
			prefixes = ("all" === prefixes ? "gkptw" : prefixes);
			for( var c = 0, length = prefixes.length; c < length; c++ ){
				vendors.push( _vendorPrefixes[prefixes[c]] )
			}
			return vendors
		}, _classHandler = new function( element ){
			var _classListIsSupported = "undefined" !== typeof Element && "classList" in document.documentElement, _classProperty = "class" + (_classListIsSupported
				? "List" : "Name");
			this.add = function( className ){
				var classes = element[_classProperty];
				if( _classListIsSupported ){
					classes.add( className )
				}
				else{
					classes += (classes ? " " : "") + className
				}
				element[_classProperty] = classes
			}
		}( document.documentElement ), _convertHyphenatedToCamelCase = function( str ){
			return str.replace( /-([a-z])/g, function( matches ){
				return matches[1].toUpperCase()
			} )
		}, _propertyExists = function( property ){
			return"undefined" !== typeof _featureDetector._getElementStyle( _testElement )[property]
		}, _supportsAll = function( properties, declareSupport ){
			var supportsAll = true;
			for( var p in properties ){
				if( !_supportsProperty( properties[p], declareSupport ) ){
					supportsAll = false;
					if( !declareSupport && !supportsAll ){
						break
					}
				}
			}
			return supportsAll
		}, _supportPrefix = "has-", _supportsProperty = function( args, declareSupport ){
			if( "undefined" !== typeof args.property ){
				var cssProperty = args.property, property = _convertHyphenatedToCamelCase( cssProperty ), vendors = args.vendors || "", supported = false;
				if( _propertyExists( property ) ){
					supported = true
				}
				else{
					var prefixedPropertyEnd = property[0].toUpperCase() + property.substr( 1 ), prefixes = _buildListOfAcceptableVendorPrefixes( vendors );
					for( var p in prefixes ){
						if( _propertyExists( prefixes[p] + prefixedPropertyEnd ) ){
							supported = true;
							if( declareSupport ){
								break
							}
						}
					}
				}
			}
			if( supported && declareSupport ){
				_classHandler.add( _supportPrefix + cssProperty )
			}
			return supported
		}, _testElement;
		this._getElementStyle = function( element ){
			return element.style
		};
		this.supports = function( schrodingersCat, declareSupport ){
			if( "undefined" === typeof declareSupport ){
				declareSupport = true
			}
			_testElement = document.createElement( "div" );
			var functionName = "_supports" + (schrodingersCat instanceof Array ? "All" : "Property");
			return eval( functionName )( schrodingersCat, declareSupport )
		}
	}
} );